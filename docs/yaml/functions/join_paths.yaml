name: join_paths
returns: str
since: 0.36.0
description: |
  Joins the given strings into a file system path segment. For example
  `join_paths('foo', 'bar')` results in `foo/bar`. If any one of the
  individual segments is an absolute path, all segments before it are
  dropped. That means that `join_paths('foo', '/bar')` returns `/bar`.

  *(since 0.49.0)* Using the `/` operator on strings is equivalent to calling
  [[join_paths]].

  ```meson
  # res1 and res2 will have identical values
  res1 = join_paths(foo, bar)
  res2 = foo / bar
  ```

warnings:
  - Don't use [[join_paths]] for sources in [[library]] and [[executable]]. You should use [[files]] instead.

varargs:
  name: part
  type: str
  description: The path parts to join.
  min_varargs: 1

kwargs:
  flavor:
    type: str
    since: 1.5.0
    description: |
      Determine the way paths are interpreted:
      - 'meson' (default): Converts backslashes to slashes. The behavior for
                           joining Windows paths depends on the host system.
                           This mode keeps the behavior of previous meson versions.
      - 'posix': Paths are handled like posix paths. Backslashes are not converted.
      - 'windows': Paths are handled like windows paths. Slashes are converted
                   to backslashes.
      - 'native': Uses 'posix' mode on posix systems, and 'windows' mode on Windows.

  mode:
    type: str
    since: 1.5.0
    description: |
      If 'relative' (default), the last part that is an absolute path becomes the starting
      point of the resulting path.
      If 'absolute', absolute paths are joined by removing the absolute component
      of subsequent paths. For instance, joining `/foo` and `/bar` becomes `/foo/bar`.
